#! /usr/bin/env perl

use strict;
use File::Basename;

###########################################################################
##
##	ABINIT-MP CPF ファイル解析プログラム			Last Update 2011/02/02
##
##	$ cpfanalyz -i INPUT_FILE -o OUTPUT -F FRAGMENT_NUM -M MODE
##
##	INPUT_FILE (--input, -I)
##
##	OUTPUT (--output, -O)
##	 * xxx.csv	... Write out csv (comma separted value) file 
##	 * xxx		... Write out tsv (tab separated value) file
##	 * -v.csv	... Write out display by csv form
##	 * -v		... Write out display by tsv form
##
##	FRAGMENT_NUM (--fragment, -F)
##	 * xxx-yyy or xxx,yyy or xxx-yyy,zzz
##	 * all		... Wild-card of all fragment
##
##	MODE (--mode, -M)
##	 * MP2		... MP2 interaction energy
##	 * HF		... HF interaction energy (!!! unpopulated !!!)
##	 * fcharge	... Fragment charge
##	 * rcharge	... Residue charge
##
###########################################################################

if(($ARGV[0] =~ /^--help$/i) || ($ARGV[0] =~ /^-H$/i)){
	&help;
	exit;
}

my ($in, $out, $out_format, $fragment, $option) = &allocate_option(@ARGV);	# オプションの割り振り

my ($name, $all_atom, $all_fragment) = &get_info($in);	# 基本情報取得
if($fragment =~ /^all$/i){
	$fragment = "1-$all_fragment";
}

my @fragments = &range($fragment);		# 指定されたフラグメントを配列に変換

my @datas = ();	# 抽出したデータ
if($option < 2){
	my @fragment_labels = &get_fragment_label($in);	# フラグメント名を抜き出す => 縦ラベル作成
	@fragment_labels = &resrenamer(@fragment_labels);	# フラグメント名を整形
	my $column_label = &make_column_label($fragment, @fragment_labels);	# 横ラベル作成
	if($option == 0){	# MP2 エネルギーを抜き出す
		@datas = &get_MP2_energy($in);
	}
	#elsif($option == 1){	# HF エネルギーを抜き出す
	#	@datas = &get_HF_energy($in);	
	#}
	
	my @new_datas = ();
	for(my $i == 0; $i <= $#datas; $i ++){
		push(@new_datas, "");
	}

	foreach(@fragments){
		my $now_fragment = $_;	# 現在のフラグメント番号を保存
		my @tmp_datas = ();			# 仮のエネルギー保存場所
		foreach(@datas){			# エネルギーデータを処理
			my @lines = split(/[\s\t]+/, $_);	# エネルギーデータを分解
			if($lines[0] == $now_fragment){	# データの先頭が現在のフラグメント番号と一致した場合
				push(@tmp_datas, "$lines[1]\t$lines[0]\t$lines[2]");	# フラグメント番号(先頭)[タブ]エネルギー
			}
			elsif($lines[1] == $now_fragment){	# データの末尾が現在のフラグメント番号と一致した場合
				push(@tmp_datas, "$lines[0]\t$lines[1]\t$lines[2]");	# フラグメント番号(末尾)[タブ]エネルギー
			}
		}
		@tmp_datas = sort {$a <=> $b} (@tmp_datas);	# エネルギーデータをソート
		my $line_num = 0;	# 配列番号
		foreach(@tmp_datas){	# 処理したデータをさらに処理
			s/^(\d+\t){2}//;			# 解析用のラベル削除
			$new_datas[$line_num] = "$new_datas[$line_num],$_";	# 保存
			$line_num ++;
			
		}
	}

	@datas = &clear_array(@new_datas);
	undef @new_datas;
	undef @fragments;

	my $line_num = 0;
	foreach(@datas){	# ラベル追加
		$_ = "$fragment_labels[$line_num],$_";
		$line_num ++;
	}
	undef @fragment_labels;
	
	unshift(@datas, $column_label);
}
elsif(2 <= $option){	# 電荷を抜き出す
	@datas = &get_charge($in, $option, @fragments);
}
else{	# サブルーチン的なエラー(実際起こり得ないはず)
	print " ERROR: Sub-routine error\n";
	exit;
}

if($out_format == 0){		# デフォルト(タブ分離)の出力
	@datas = &change_default_form(@datas);
}
elsif($out_format == 1){	# csv の出力
	@datas = &change_csv_form(@datas);
}
else{		# サブルーチン的なエラー(実際起こり得ないはず)
	print " ERROR: Sub-routine error\n";
	exit;
}

# 出力
if($out !~ /^-v/i){	# ファイルに出力
	open(OUT, "> $out");
	foreach(@datas){
		print OUT $_, "\n";
	}
	close(OUT);
}
else{				# 画面に出力
	foreach(@datas){
		print $_, "\n";
	}
}

exit;

# =============== allocate_option =============== #
sub allocate_option{
my @arguments = @_;

my $flag1 = 0;	# 引数判定
my $flag2 = 0;	# 引数揃った判定
my $in = "";	# 入力ファイル
my $fragment = "";	# 対象フラグメント
my $out = "";	# 出力先
my $out_format = 0;	# 出力の形式
my $option = 0;	# 出力するデータの種類(0: MP2, 1: HF, 2: charge)
foreach(@arguments){
	if($flag1 == 1){	# 入力引数指定が前にあった場合
		if(! -f $_){	# 入力ファイルが存在しない場合
			print " ERROR: No such file: $_\n";
			exit;
		}
		$in = $_;		# 入力ファイル
		$flag1 = 0;	# 引数判定を戻す
		$flag2 += 1;	# 入力引数完了
	}
	elsif($flag1 == 2){	# 出力引数指定が前にあった場合
		if(/^-V$/i){	# 画面に出力
			$out = "-V";
		}
		else{			# ファイルに出力
			$out = $_;
		}
		
		if(/\.csv$/i){	# csv の場合
			$out_format = 1;
		}
		$flag1 = 0;	# 引数判定を戻す
		$flag2 += 2;	# 出力引数完了
	}
	elsif($flag1 == 3){	# フラグメント引数指定が前にあった場合
		$fragment = $_;	# フラグメント
		$flag1 = 0;		# 引数判定を戻す
		$flag2 += 4;		# フラグメント引数完了
	}
	elsif($flag1 == 4){	# モード選択
		if(/^MP2$/i){		# MP2
			$option = 0;
		}
		elsif(/^HF$/i){		# HF
			$option = 1;
		}
		elsif(/^rcharge$/i){	# 残基の電荷
			$option = 2;
		}
		elsif(/^fcharge$/i){	# フラグメントの電荷
			$option = 3;
		}
		else{
			print " ERROR: Invalid argument: $_\n Only select MP2/HF/rcharge/fcharge\n";
			exit;
		}
		$flag1 = 0;	# 引数判定を戻す
		$flag2 += 8;	# オプション指定完了
	}
	elsif((/^--input$/i) || (/^-I$/i)){	# 入力引数指定
		$flag1 = 1;
	}
	elsif((/^--output$/i) || (/^-O$/i)){	# 出力引数指定
		$flag1 = 2;
	}
	elsif((/^--fragment$/i) || (/^-F$/i)){	# フラグメント引数指定
		$flag1 = 3;
	}
	elsif((/^--mode$/i) || (/^-M$/i)){
		$flag1 = 4;
	}
}

if($flag2 != 15){	# 引数が全部揃っていない場合
	print " ERROR: Not enough argument or too many argument\n";
	exit;
}

return $in, $out, $out_format, $fragment, $option;
}

# =============== get_info =============== #
# 基本情報を取得
sub get_info{
my $in = shift(@_);

my $name = "";
my $atom = 0;
my $fragment = 0;
open(IN, $in);
while(<IN>){
	chomp;
	if($. == 1){
		$name = $_;
	}
	elsif($. == 2){
		my @lines = &separate(5, $_);
		shift(@lines);
		($atom, $fragment) = &delete_space(@lines);
	}
	else{
		last;
	}
}
close(IN);

return $name, $atom, $fragment;
}

# =============== get_fragment_label =============== #
sub get_fragment_label{
my $in = shift(@_);

my $before_residue = "";	# 前の行の残基情報
my @residue_names = ();	# 残基名
my @residue_nums = ();	# 残基番号

open(IN, $in);
while(<IN>){
	if(/^\s*\d+\s\D+\s*\w+\s*\w+\s*\d+\s*\d+(\s*-?\d+\.\d+){3,}/){	# 原子情報
		chomp;
		my $residue = substr($_, 14, 9);	# 残基情報取得
		if($residue ne $before_residue){	# 前と異なったら登録
			my $name = substr($residue, 0, 3);	# 残基名
			$name =~ s/\s*//g;
			push(@residue_names, $name);
			my $num = substr($residue, 3, 6);		# 残基番号
			$num =~ s/\s*//g;
			push(@residue_nums, $num);
			$before_residue = $residue;
		}
	}
}
close(IN);

my $line_num = 0;
foreach(@residue_names){
	$_ = $_ . $residue_nums[$line_num];
	$line_num ++;
}

return @residue_names;
}

# =============== get_MP2_energy =============== #
sub get_MP2_energy{
my $in = shift(@_);	# 入力ファイル

my @connections = &get_connection($in);	# 接続情報を取得

my $fragment = 0;	# フラグメント数
my $line_num = 0;	# エネルギーにおける行番号
my @energies = ();	# エネルギー
open(IN, $in);
while(<IN>){
	chomp;
	if($. == 2){	# 2 行目は原子数とフラグメント数
		$fragment = substr($_, 5, 5);
		$fragment = &delete_space($fragment);
	}
	elsif(/^([\s\t]*-?\d+\.\d+(E[\+-]?\d+)?){2}[\s\t]*$/){	# データが2つある場合
		$line_num ++;
		if($fragment < $line_num){	# 最初データからフラグメント数分をスキップする
			s/^\s*//;
			my @lines = split(/\s+/, $_);
			if($lines[0] =~ /^-?\d+\.\d+E[\+-]\d+$/){	# データが指数表現の場合
				my @lines2 = split(/E/, $lines[0]);
				$lines[0] = $lines2[0] * 10 ** $lines2[1];
			}
			if($lines[1] =~ /^-?\d+\.\d+E[\+-]\d+$/){	# データが指数表現の場合
				my @lines2 = split(/E/, $lines[1]);
				$lines[1] = $lines2[0] * 10 ** $lines2[1];
			}
			my $energy = ($lines[0] + $lines[1]) * 627.5095;	# 相互作用エネルギー
			push(@energies, $energy);
		}
	}
}
close(IN);

$line_num = 0;
my @labels = ();	# 解析用のラベル(相互作用フラグメント 2..1, 3..1, 3..2, 4..1, 4..2, 4..3, 5..1, 5..2, ...)
for(my $i = 1; $i <= $fragment; $i ++){
	for(my $j = 1; $j <= $fragment; $j ++){
		if($i == $j){	# 同じフラグメントが合ったら次の i ループへ
			last;
		}
		else{
			push(@labels, "$j\t$i");	# ラベル登録
			
			if(($i - 1 == $j) || ($i + 1 == $j) || ($i == $j - 1) || ($i == $j + 1)){
				my @datas = ($i, $j);				# ラベルを配列に格納
				@datas = sort(@datas);				# ソート
				my $string = join(",", @datas);	# 文字列に変換
				my @new_connections = ();
				while(@connections){				# 接続情報を検索
					my $elem = shift(@connections);
					
					if($string eq $elem){			# 現在のラベルがフラグメントが隣接しているものの場合
						$energies[$line_num] = 0;			# 隣接している場合は 0 エネルギーにする(そうでないと，共有結合エネルギーが表示される)
						last;
					}
					else{
						push(@new_connections, $elem);
					}
				}
				push(@new_connections, @connections);
				@connections = @new_connections;
			}
			$line_num ++;
		}
	}
}

for(my $i = 1; $i <= $fragment; $i ++){	# 同じフラグメントの相互作用を登録する
	push(@labels, "$i\t$i");
	push(@energies, 0);
}

$line_num = 0;
foreach(@labels){	# 他のルーチンへデータを渡すために整形
	$energies[$line_num] = sprintf("%0.6f", $energies[$line_num]);
	$_ = $_ . "\t" . $energies[$line_num];	# フラグメント1[タブ]フラグメント2[タブ]エネルギー
	$line_num ++;
}

return @labels;
}

# =============== get_connection =============== #
# 接続情報を取得
sub get_connection{
my $in = shift(@_);

my $flag = 0;					# 文書内の位置
my $atom = 0;					# 系の原子数
my $fragment = 0;				# 系のフラグメント数
my $save_fragment = 0;		# 処理しているフラグメント番号
my $count = 0;					# カウンタ
my @fragment_elements = ();		# 処理しているフラグメント構成原子
my @all_fragment_elements = ();	# フラグメント構成原子
open(IN, $in);
while(<IN>){
	chomp($_);
	my $line = $_;
	if($. == 2){
		$atom = substr($line, 0, 5);		# 原子数取得
		$fragment = substr($line, 5, 5);	# フラグメント数取得
	}
	elsif(/^[\s\t]*\d+\s[a-zA-Z]{1,2}/){	# 原子情報取得
		my $atom_order = substr($line, 0, 5);	# 原子順序番号取得
		$atom_order = &delete_space($atom_order);
		my $now_fragment = substr($line, 22, 5);		# 現在のフラグメント番号
		$now_fragment = &delete_space($now_fragment);
		if($now_fragment != $save_fragment){		# 現在のフラグメント番号が処理しているフラグメント番号と異なる場合
			my $element = join(",", @fragment_elements);	# フラグメント構成原子を文字列として結合
			@fragment_elements = ();	# 初期化
			push(@all_fragment_elements, "$save_fragment\t$element");		# フラグメント構成原子を保存
			
			push(@fragment_elements, $atom_order);	# 次のフラグメント構成原子を保存
			$save_fragment = $now_fragment;	# 処理しているフラグメント番号の更新
		}
		else{
			push(@fragment_elements, $atom_order);	# フラグメント構成原子を保存
		}
	}
	elsif(/^([\s\t]*\d+){2}/){	# 原子情報の下の情報
		if($flag < 3){	# 不要なデータ
			if($flag == 0){	# 前データの残飯処理
				my $element = join(",", @fragment_elements);	# フラグメント構成原子を文字列として結合
				@fragment_elements = ();	# 初期化
				push(@all_fragment_elements, "$save_fragment\t$element");		# フラグメント構成原子を保存
				shift(@all_fragment_elements);
				
				@fragment_elements = @all_fragment_elements;
				@all_fragment_elements = ();
				$flag = 1;
			}
			my @lines = &separate(5, $_);	# データを分解
			shift(@lines);					# 先頭のデータ(分割しきれなかったデータ)を削除
			$count += $#lines + 1;			# データ数取得
			if($fragment <= $count){
				$flag ++;			# フラグ変更
				$count = 0;		# カウンタ初期化
			}
		}
		elsif($flag == 3){	# 結合情報
			my @lines = &separate(5, $line);	# データを分解
			shift(@lines);
			@lines = &delete_space(@lines);		# 空白を削除
			foreach(@fragment_elements){
				my @datas = split(/[\s\t]+/, $_);	# フラグメント番号と構成原子を分解
				my @sub_datas = split(/,/, $datas[1]);	# 構成原子を分解
				foreach(@sub_datas){
					if($lines[0] == $_){		# 結合情報 1 の構成原子と一致した場合
						$lines[0] = $datas[0];	# 結合情報 1 をフラグメント番号で置換
						last;
					}
					elsif($lines[1] == $_){		# 結合情報 2 の構成原子と一致した場合
						$lines[1] = $datas[0];	# 結合情報 2 をフラグメント番号で置換
						last;
					}
				}
			}
			@lines = sort(@lines);					# 要素内をソート
			my $line = join(",", @lines);			# フラグメント結合情報を結合
			push(@all_fragment_elements, $line);	# フラグメント結合情報を保存
		}
		
	}
	elsif(/^[\s\t]*-?\d+\.\d+(E[\+-]\d+)?/){	# エネルギー情報に入ったので終了
		last;
	}
}
close(IN);

return @all_fragment_elements;
}

# =============== get_charge =============== #
# 電荷取得
sub get_charge{
my $in = shift(@_);		# 入力ファイル
my $option = shift(@_);	# オプション
my @lists = @_;				# 取得するフラグメント番号

my $before_number = 0;			# 前の番号
my @residues = ();					# 残基データ
my @fragments = ();					# フラグメント番号(フラグメントオプションのみ変化)
my %charge_finals = {};				# 全電荷データ
my $first_flag = 0;				# 最初読み込み
open(IN, $in);
while(<IN>){
	if(/^[\s\t]*\d+\s[a-zA-Z]+\s/){
		my $residue_name = substr($_, 14, 3);	# 残基名
		my $number = 0;	# 番号
		my $charge = substr($_, 64, 12);	# 電荷
		if($option == 3){	# フラグメント毎の電荷
			$number = substr($_, 22, 5);
			$number = &delete_space($number);
			foreach(@lists){
				my $search = $_;
				if($number == $search){
					$charge_finals{"$number"} += $charge;		# 電荷保存
					@residues = &check_list($number, @residues);	# フラグメント番号追加
					last;
				}
			}
		}
		else{				# 残基毎の電荷
			$number = substr($_, 17, 5);
			$residue_name = &resrenamer("$residue_name$number");
			foreach(@lists){
				my $search = $_;
				if($number == $search){
					$charge_finals{"$residue_name"} += $charge;		# 電荷保存
					@residues = &check_list("$residue_name", @residues);	# 残基名追加
					last;
				}
			}
		}
	}
}
close(IN);

my @datas = ();
foreach(@residues){
	$charge_finals{$_} = sprintf("%0.7f", $charge_finals{$_});
	push(@datas, "$_,$charge_finals{$_}");
}

return @datas;
}

# =============== check_list =============== #
# リスト中に要素があるか確認(なければ追加)
sub check_list{
my $add_elem = shift(@_);	# 確認する要素
my @lists = @_;				# 既にあるリスト

my $flag = 0;	# 該当フラグ
foreach(@lists){	# 既にあるリストを検索
	if($add_elem eq $_){	# 該当した場合
		$flag = 1;
		last;
	}
}

if($flag == 0){	# 該当しない場合
	push(@lists, $add_elem);
}

return @lists;
}

# =============== delete_space =============== #
# 空白文字を削除
sub delete_space{
my @lines = @_;

foreach(@lines){	# 置換(削除)
	s/[\s\t]+//g;
}

if($#lines == 0){	# 対象が変数の場合
	return $lines[0];
}
else{				# 対象が配列の場合
	return @lines;
}
}

# =============== separate =============== #
# 文字列を指定文字数ずつ区切る
sub separate{
my $separate_num = shift(@_);	# 何文字で区切るか
my $line = shift(@_);			# 区切る対象

$separate_num = &check_int($separate_num);	# 整数かチェック

my @coordinates = ();
my $length = length($line);	# 文字列の長さ取得

while($separate_num <= $length){	# 文字列の長さが区切り文字数より多い場合
	my $data = substr($line, 0, $separate_num);	# 文字列取得
	push(@coordinates, $data);	# 保存
	substr($line, 0, $separate_num) = "";	# 取得した分を削除
	$length = length($line);	# 文字列の長さ取得
}

return $line, @coordinates;
}

# =============== check_int =============== #
# 対象が整数かチェックする
sub check_int{
my $num = shift(@_);

if($num !~ /^\d+$/){
	print " ERROR: Argument is not integer\n";
	exit;
}

return $num;
}

# =============== range =============== #
sub range{
my $numarray = shift(@_);		# 削除原子群情報

my @numarray1 = split(/,/, $numarray);
my @numarray2 = ();		# 範囲指定情報も含めた最終的情報を格納する
my $count = 0;				# numarray2の配列番号
foreach(@numarray1){
	if(/-/){	# x-y等の範囲指定を認識
		my @wide = split(/-/, $_);	# 開始と終了に分ける
		if($wide[0] =~ /^$/){	# 開始がない場合
			$wide[0] = 1;
		}
		elsif($wide[1] =~ /^$/){	# 終了がない場合
			$numarray2[$count++] = $wide[0];
			$numarray2[$count++] = -1;
			last;
		}
		my $i = 0;
		for($i = $wide[0]; $i <= $wide[1]; $i++){	# 範囲をすべて数字にする
			$numarray2[$count++] = $i;
		}
	}
	else{
		$numarray2[$count++] = $_;
	}
}
return @numarray2;
}

# =============== make_column_label =============== #
# 対象フラグメントを選択し，横ラベルを作成する
sub make_column_label{
my $select = shift(@_);
my @datas = @_;

my @new_datas = ();
my @selects = &range($select);
foreach(@selects){
	push(@new_datas, $datas[$_ - 1]);
}

unshift(@new_datas, "");
my $column_label = join(",", @new_datas);

return $column_label;
}

# =============== change_default_form =============== #
# タブ分離形式に変換
sub change_default_form{
my @datas = @_;

foreach(@datas){
	$_ =~ s/,/\t/g;	# 各要素に " を付ける
}

if($#datas == 0){	# 入力対象が変数の場合
	return $datas[0];
}
else{				# 入力対象が配列の場合
	return @datas;
}
}

# =============== change_csv_form =============== #
# csv 形式に変換
sub change_csv_form{
my @datas = @_;

foreach(@datas){
	$_ =~ s/,/\",\"/g;	# 各要素に " を付ける
	$_ =~ s/^/\"/;		# 先頭に " を付ける
	$_ =~ s/$/\"/;		# 末尾に " を付ける
}

if($#datas == 0){	# 入力対象が変数の場合
	return $datas[0];
}
else{				# 入力対象が配列の場合
	return @datas;
}
}

# =============== resrenamer =============== #
sub resrenamer{
my @datas = @_;

my @new_datas = ();
my $baseresnum = 0;		# 追加する残基番号
my $format = 'RES\sNUM';	# 書式
$format =~ s/\\t/\t/g;		# 特殊な書式変換
$format =~ s/\\s/ /g;		# 特殊な書式変換
my $before_length = 0;
my $before_num = 0;
foreach(@datas){
	chomp;
	s/[\s\t]+//;
	if(/^$/){
		next;
	}
	else{
		$_ =~ s/[\(\)]//g;
		$_ =~ s/\D+//;
		my $resname = $&;
		$resname =~ s/\s+//g;
		$resname =~ s/t\+//g;
		$_ =~ s/\d+//;
		my $num = $&;
		
		my $length = length($num);	# 残基番号の字数
		if(($resname ne "DG") && ($resname ne "DC") && ($resname ne "DA") && ($resname ne "DT") && ($resname ne "RG") && ($resname ne "RC") && ($resname ne "RA") && ($resname ne "RU")){
			$resname =~ s/^.*$/\L$&\E/;	# 2文字の原子は最初を大文字，次を小文字にする; ここでは全て小文字にしている
			$resname =~ s/[a-z]/\U$&\E/;		# ここでは最初の文字を大文字にしている
			$num += $baseresnum;
			$before_length = $length;
		}
		else{
			if(($. == 1) || (($before_length != $length) && (($before_num != $num - 1) && ($before_num != $num + 1)))){
				# 末端の場合(最初の残基の場合，あるいは桁が繰り上がった訳でもないのに前の字数と違う場合)
				my @strings = split(//, $num);
				my $firstnum = shift(@strings);
				$firstnum =~ s/^/\(/;
				$firstnum =~ s/$/\)/;
				$resname .= $firstnum;
				$num = join("", @strings);
				$num += $baseresnum;
			}
			else{	#末端でない場合
				$num += $baseresnum;
				$before_length = $length;	# 前の残基番号の字数として登録
			}
			$before_num = $num;	# 前の残基番号として登録
		}
		my $output = $format;
		$output =~ s/RES/$resname/g;
		$output =~ s/NUM/$num/g;
		push(@new_datas, $output);
	}
}

if($#new_datas == 0){
	return $new_datas[0];
}
else{
	return @new_datas;
}
}

# =============== clear_array =============== #
# 中身のない要素を削除
sub clear_array{
my @datas = @_;

my @new_datas = ();	# 新しいデータ
foreach(@datas){	# 今までのデータを調べる
	s/^,//;		# 先頭にある中身のないデータは削除
	if(/^$/){	# 中身のないものはスキップ
		next;
	}
	push(@new_datas, $_);
}

return @new_datas;
}

# =============== help =============== #
sub help{
my $script_name = basename($0);
print << "HELP";
 \$ $script_name -i INPUT_FILE -o OUTPUT -F FRAGMENT_NUM -M MODE

	INPUT_FILE (--input, -I)
	
	OUTPUT (--output, -O)
	 * xxx.csv	... Write out csv (comma separted value) file 
	 * xxx		... Write out tsv (tab separated value) file
	 * -v.csv	... Write out display by csv form
	 * -v		... Write out display by tsv form

	FRAGMENT_NUM (--fragment, -F)
	 * xxx-yyy or xxx,yyy or xxx-yyy,zzz
	 * all		... Wild-card of all fragment

	MODE (--mode, -M)
	 * MP2		... MP2 interaction energy
	 * HF		... HF interaction energy (!!! unpopulated !!!)
	 * fcharge	... Fragment charge
	 * rcharge	... Residue charge

HELP
}
